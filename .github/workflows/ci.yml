name: Banking Legacy-to-Blockchain B2BaaS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-coverage:
    name: 100% Test Coverage Enforcement
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests with 100% coverage enforcement
      run: npm run test
      env:
        NODE_ENV: test
        
    - name: Verify coverage thresholds
      run: npm run coverage-gate
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: Archive coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.node-version }}
        path: coverage/
        
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Run dependency vulnerability scan
      run: npx audit-ci --moderate
      
  blockchain-integration:
    name: Blockchain Integration Tests
    runs-on: ubuntu-latest
    needs: test-coverage
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legacy_baas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start blockchain simulators
      run: |
        docker run -d --name ganache -p 8545:8545 trufflesuite/ganache:latest
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8545; do sleep 2; done'
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: legacy_baas_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        ETH_RPC_URL: http://localhost:8545
        
  build-docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test-coverage, security-audit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        tags: legacy-baas:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'legacy-baas:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-coverage, security-audit, blockchain-integration]
    
    steps:
    - name: Quality Gate Check
      run: |
        echo "‚úÖ All quality checks passed:"
        echo "  - 100% test coverage enforced"
        echo "  - Security audit completed"
        echo "  - Blockchain integration tests passed"
        echo "  - Code quality standards met"
        echo ""
        echo "üöÄ Ready for deployment to next environment"
        
  notify-slack:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#legacy-baas-ci'
        text: |
          üè¶ Banking Legacy-to-Blockchain B2BaaS CI Pipeline
          
          Status: ${{ job.status == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          
          ${{ job.status == 'success' && '100% test coverage maintained!' || 'Quality gate failed - review required' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != null